class Demo1
{
  int[] id;
  int count;
	public Demo1 (int N)
	{
		id = new int[N];
		for(int i=0;i<N;i++)
		{
			id[i]=i;
		}
	}
	private int find(int p)
	{ // Find component name.
		while (p != id[p])
		{
			p = id[p];
		}
		return p;
	}
	public void union(int p, int q)

	{ // Give p and q the same root.

		int pRoot = find(p);
		int qRoot = find(q);
		if (pRoot == qRoot) 
		{
			return;
		}
		id[pRoot] = qRoot;
		count--;
	}
	public void print()
	{
		for(int i=0;i<id.length;i++)
		{
			System.out.print("\t"+id[i]);
		}
		System.out.print("\n");
	}
}
 public  class problem1
{
	public static void main(String[] args)
	{
	System.out.println("QUICK FIND");
	Demo1 d1 = new Demo1(10);
	d1.union(9,0);
	d1.print();
	d1.union(3,4);
	d1.print();
	d1.union(5,8);
	d1.print();
	d1.union(7,2);
	d1.print();
	d1.union(2,1);
	d1.print();
	d1.union(5,7);
	d1.print();
	d1.union(0,3);
	d1.print();
	d1.union(4,2);
	d1.print();
	/*System.out.println(d.connected(9,0));
	System.out.println(d.connected(2,4));
	System.out.println(d.connected(7,2));
	System.out.println(d.connected(5,6));*/
	}
}
